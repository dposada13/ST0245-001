public int maxSpan(int[] nums) {
    if (nums.length > 0) {
        int maxSpan = 1;
        for (int i = 0; i < nums.length; i++)
            for (int j = nums.length - 1; j > i; j--)
                if (nums[j] == nums[i]) {
                    int count = (j - i) + 1;
                    if (count > maxSpan) maxSpan = count;
                    break;
                }
        return maxSpan;
    } else return 0;
}
--------------------------------------------------------------------------------------
public int[] fix34(int[] nums) {
    for (int i = 0; i < nums.length; i++)
        if (nums[i] == 3) {
            int temp = nums[i + 1];
            nums[i + 1] = 4;
            for (int j = i + 2; j < nums.length; j++)
                if (nums[j] == 4) nums[j] = temp;
        }
    return nums;
}
----------------------------------------------------------------------------------
public int[] fix45(int[] nums)
{
  int j = 0;
	for(int i = 0; i < nums.length - 1; i++)
	{
		if(nums[i] == 4 && nums[i+1] != 5)
		{
			for(; !(nums[j] == 5 && (j == 0 || j > 0 && nums[j-1] != 4)); j++);
			nums[j] = nums[i+1];
			nums[i+1] = 5;
		}
	}
	return nums;
}
---------------------------------------------------------------------------------------------
public boolean canBalance(int[] nums) {
    for (int i = 0; i < nums.length; i++) { 
        int sum = 0;
        for (int j = 0; j < i; j++) 
        sum += nums[j];
        for (int j = i; j < nums.length; j++)
        sum -= nums[j];
        if (sum == 0) return true;
    }
    return false;
}
---------------------------------------------------------------------------------------------------
public boolean linearIn(int[] outer, int[] inner)
{
	boolean notFound;
  for(int inI = 0, outI = 0; inI < inner.length; inI++)
  {
  	notFound = true;
  	for(; outI < outer.length && notFound; outI++)
  	{
  		if(inner[inI] == outer[outI])
  			notFound = false;
  	}
  	if(notFound)
  		return false;
  }
  return true;
}
